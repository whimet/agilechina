<project name="cruise-dashboard" default="all.test">
    <import file="panopticode/panopticode-imports.xml" />  
	<property name="build.dir" value="target" />
	<property name="dist.dir" value="dist" />  
	<property name="war.dir" value="${build.dir}/war" />
	<property name="app.classes.dir" value="${war.dir}/WEB-INF/classes" />
	<property name="emma.classes.dir" value="${build.dir}/classes" />
	<property name="test.classes.dir" value="${build.dir}/classes/test" />
	<property name="functionaltest.classes.dir" value="${build.dir}/classes/functionaltest" />
	<property name="src.dir" value="src" />
	<property name="war.src.dir" value="webapp" />
	<property name="resources.dir" value="resources" />
	<property name="test.dir" value="test" />
	<property name="unittest.dir" value="${test.dir}/unit" />
	<property name="functionaltest.dir" value="${test.dir}/functional" />
	<property name="reports.dir" value="${build.dir}/reports" />
	
	<target name="passed" />
		
	<import file="jsunit/jsunit.xml" />

	<path id="lib.classpath">
		<fileset dir="${basedir}/lib" includes="**/*.jar" />
	</path>

	<path id="app.classpath">
		<path refid="lib.classpath" />
		<pathelement path="${app.classes.dir}" />
		<fileset dir="panopticode" includes="lib/**/*.jar" />
	</path>

	<fileset dir="lib" id="product.lib">
		<include name="*.jar" />
	</fileset>

	<path id="product.lib.path">
		<fileset refid="product.lib" />
	</path>

	<path id="test.classpath">
		<pathelement path="${emma.classes.dir}" />
		<pathelement path="${test.classes.dir}" />
		<pathelement path="${functionaltest.classes.dir}" />
		<pathelement path="${war.src.dir}" />
		<path refid="app.classpath" />
	</path>

	<target name="-clean">
		<delete dir="${build.dir}" quiet="true" />
		<delete dir="${app.classes.dir}" quiet="true" />
	</target>

	<target name="-check-jdk">
		<condition property="not.jdk1.5">
			<not>
				<equals arg1="${ant.java.version}" arg2="1.5" />
			</not>
		</condition>
	</target>

	<target name="-report-no-jsunit-tests" if="not.jdk1.5">
		<echo>You are using an older jdk version, so functional testing with jsunit will be skipped.</echo>
	</target>
	
    <target name="metrics" depends="clean">
        <panopticode projectDir="${basedir}"
                     projectName="${ant.project.name}"
                     projectVersion="${version}"
                     srcDir="${src.dir}" />
    </target>

	<target name="-compile">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${emma.classes.dir}" />
		<mkdir dir="${app.classes.dir}" />
		<javac destdir="${app.classes.dir}" classpathref="app.classpath" debug="true" source="1.4" target="1.4">
			<src location="${src.dir}" />
		</javac>
		<javac destdir="${emma.classes.dir}" classpathref="app.classpath" debug="true" source="1.4" target="1.4">
			<src location="${src.dir}" />
		</javac>
	</target>

	<target name="-compile-tests">
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${functionaltest.classes.dir}" />
		<javac destdir="${test.classes.dir}" classpathref="test.classpath" debug="true" failonerror="true" source="1.4" target="1.4">
			<src location="${unittest.dir}" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
		<javac destdir="${functionaltest.classes.dir}" classpathref="test.classpath" debug="true" failonerror="true" source="1.4" target="1.4">
			<src location="${functionaltest.dir}" />
		</javac>
	</target>

	<target name="-unit-tests">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${test.classes.dir}/build" />
        <mkdir dir="target/rawmetrics/xml/junit" />
        <panopticode-junit unitTestClasspathId="test.classpath"
                           outputDir="target">
            <batchtest todir="target/rawmetrics/xml/junit">
				<fileset dir="${test.classes.dir}" includes="**/*Test.class" />
            </batchtest>
        </panopticode-junit>
	</target>

	<target name="-functional-tests">
		<mkdir dir="${reports.dir}" />
		<junit printsummary="true" fork="true" haltonfailure="true" dir="${basedir}">
			<classpath refid="test.classpath" />
			<formatter type="xml" />
			<test name="com.google.code.calc.jwebunittests.AllTests" todir="${reports.dir}" />
		</junit>
	</target>

	<target name="-selenium.tests">
		<mkdir dir="${reports.dir}" />
		<junit printsummary="true" fork="true" haltonfailure="true" dir="${basedir}">
			<classpath refid="test.classpath" />
			<formatter type="xml" />
			<test name="com.google.code.calc.seleniumtests.AllSeleniumTests" todir="${reports.dir}" />
		</junit>
	</target>

	<target name="-copy.resources.web">
		<mkdir dir="${war.dir}" />
		<copy todir="${war.dir}">
			<fileset dir="${war.src.dir}">
				<exclude name="**/classes/**" />
			</fileset>
		</copy>
	</target>

	<!-- checkstyle -->
	<target name="-checkstyle-main">
		<taskdef classpathref="lib.classpath" resource="checkstyletask.properties" />
		<sequential>
			<checkstyle config="checkstyle.xml">
				<fileset dir="${src.dir}" includes="**/*.java" />
				<fileset dir="${unittest.dir}" includes="**/*.java" />
				<formatter type="plain" />
				<formatter type="xml" toFile="${reports.dir}/checkstyle-log.xml" />
			</checkstyle>
		</sequential>
	</target>

	<target name="-war.production">
		<mkdir dir="${dist.dir}" />
		<war destfile="${dist.dir}/calc.war" webxml="${war.dir}/WEB-INF/web.xml" duplicate="preserve">
			<lib refid="product.lib" />
		</war>
	</target>

	<target name="-war.development">
		<mkdir dir="${dist.dir}" />
		<war destfile="${dist.dir}/calc.war" webxml="${war.dir}/WEB-INF/web.xml" duplicate="preserve">
			<fileset dir="${war.dir}" />
			<classes dir="${test.classes.dir}" />
			<lib dir="lib" />
		</war>
	</target>


	<target name="-start.jetty.server">
		<java classname="com.google.code.calc.helper.Localhost" fork="true">
			<classpath refid="test.classpath" />
		</java>
	</target>

	<target name="-jsunit" unless="not.jdk1.5">
		<copy todir="jsunit/ccjs" overwrite="true">
			<fileset dir="${war.src.dir}/javascripts">
				<include name="*.js" />
			</fileset>
		</copy>
		<echo message="${lib}" />
		<echo message="${basedir}" />
		<junit showoutput="true" haltonerror="true" haltonfailure="true">
			<formatter type="plain" usefile="false" />
			<classpath refid="classpath" />
			<sysproperty key="browserFileNames" value="${browserFileNames}" />
			<sysproperty key="description" value="${description}" />
			<sysproperty key="closeBrowsersAfterTestRuns" value="${closeBrowsersAfterTestRuns}" />
			<sysproperty key="logsDirectory" value="${logsDirectory}" />
			<sysproperty key="port" value="${port}" />
			<sysproperty key="resourceBase" value="${resourceBase}" />
			<sysproperty key="timeoutSeconds" value="${timeoutSeconds}" />
			<sysproperty key="url" value="${url}" />
			<test name="net.jsunit.StandaloneTest" />
		</junit>
	</target>

	<target name="-start.selenium.server">
		<java jar="lib/buildtime/selenium-server.jar" fork="true" spawn="true">
			<arg line="-timeout 30" />
		</java>
		<echo message="started up selenium server, trying to verify whether that is ready"/>
		<waitfor maxwait="1" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
			<socket server="localhost" port="4444" />
		</waitfor>
		<echo message="selenium server is ready."/>
	</target>
	

	<target name="-stop.selenium.server">
		<get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDown" dest="selenium-result.txt" ignoreerrors="true" />
	</target>

    <target name="rasterize-all-reports" depends="rasterize-png-reports,rasterize-jpeg-reports,rasterize-tiff-reports"/>

    <target name="rasterize-png-reports">
        <delete dir="target/reports/png" />
        <mkdir dir="target/reports/png" />

        <svg-to-png srcFile="target/reports/svg/complexity-treemap.svg"
                    destFile="target/reports/png/complexity-treemap.png" />
        <svg-to-png srcFile="target/reports/svg/coverage-treemap.svg"
                    destFile="target/reports/png/coverage-treemap.png" />

        <svg-to-png srcFile="target/reports/svg/complexity-treemap.svg"
                    destFile="target/reports/png/complexity-treemap-thumb.png"
                    width="128"
                    height="96"/>
        <svg-to-png srcFile="target/reports/svg/coverage-treemap.svg"
                    destFile="target/reports/png/coverage-treemap-thumb.png"
                    width="128"
                    height="96"/>
    </target>

    <target name="rasterize-jpeg-reports">
        <delete dir="target/reports/jpeg" />
        <mkdir dir="target/reports/jpeg" />

        <svg-to-jpeg srcFile="target/reports/svg/complexity-treemap.svg"
                     destFile="target/reports/jpeg/complexity-treemap.jpg" />
        <svg-to-jpeg srcFile="target/reports/svg/coverage-treemap.svg"
                     destFile="target/reports/jpeg/coverage-treemap.jpg" />

        <svg-to-jpeg srcFile="target/reports/svg/complexity-treemap.svg"
                     destFile="target/reports/jpeg/complexity-treemap-thumb.jpg"
                     width="128"
                     height="96"/>
        <svg-to-jpeg srcFile="target/reports/svg/coverage-treemap.svg"
                     destFile="target/reports/jpeg/coverage-treemap-thumb.jpg"
                     width="128"
                     height="96"/>
    </target>

    <target name="rasterize-tiff-reports">
        <delete dir="target/reports/tiff" />
        <mkdir dir="target/reports/tiff" />

        <svg-to-tiff srcFile="target/reports/svg/complexity-treemap.svg"
                     destFile="target/reports/tiff/complexity-treemap.tif" />
        <svg-to-tiff srcFile="target/reports/svg/coverage-treemap.svg"
                     destFile="target/reports/tiff/coverage-treemap.tif" />

        <svg-to-tiff srcFile="target/reports/svg/complexity-treemap.svg"
                     destFile="target/reports/tiff/complexity-treemap-thumb.tif"
                     width="128"
                     height="96"/>
        <svg-to-tiff srcFile="target/reports/svg/coverage-treemap.svg"
                     destFile="target/reports/tiff/coverage-treemap-thumb.tif"
                     width="128"
                     height="96"/>
    </target>

	<target name="-sleep">
		<sleep seconds="1" />
	</target>

	<target name="--compile" depends="-clean, -copy.resources.web, -compile" />
	<target name="--run.unit.tests" depends="--compile, -compile-tests,-unit-tests" />
	<target name="--run.functional.tests" depends="--prepare.functional.tests, -functional-tests" />
	<target name="--start-jetty-server" depends="-start.jetty.server" />
	<target name="--run.all.tests" depends="--run.unit.tests, --run.functional.tests, -checkstyle-main" />
	<target name="--prepare.functional.tests" depends="--compile, -compile-tests, -war.development" />
	<target name="--run.selenium.tests" depends="-start.selenium.server, -selenium.tests, -stop.selenium.server" />
	<target name="--selenium" depends="--prepare.functional.tests, -start.selenium.server, -selenium.tests, -stop.selenium.server" />
	<target name="--dist" depends="-clean, --run.all.tests, -war.production" />
	<target name="--product" depends="--compile, -war.production" description="build and package war without testing" />

	<target name="compile" depends="-compile" />
	<target name="clean" depends="-clean" />
	<target name="unit-test" depends="-copy.resources.web, -compile, -compile-tests, -unit-tests" description="run all unit tests" />
	<target name="ut" depends="--run.unit.tests" description="run all unit tests" />
	<target name="ft" depends="--run.functional.tests" description="run all functional tests" />
	<target name="start.server" depends="--compile, -compile-tests, --start-jetty-server" description="start jetty server" />
	<target name="all.test" depends="-sleep, metrics, rasterize-all-reports, --run.all.tests, js.unit, --run.selenium.tests, -war.production" description="run unit tests and functional tests" />
	<target name="checkstyle" depends="-checkstyle-main" description="checkstyle" />
	<target name="js.unit" depends="-check-jdk, -report-no-jsunit-tests, -jsunit" description="run jsunit test" />
	<target name="selenium" depends="--selenium" description="run selenium test" />
	<target name="dist" depends="--dist" description="build and package war" />
	<target name="product" depends="--product" description="build and package war without testing" />
</project>
